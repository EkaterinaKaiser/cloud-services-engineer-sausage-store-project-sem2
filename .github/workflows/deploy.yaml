name: Build and Deploy Sausage Store

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME_BACKEND: sausage-store-backend
  IMAGE_NAME_FRONTEND: sausage-store-frontend
  IMAGE_NAME_BACKEND_REPORT: sausage-store-backend-report

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=raw,value=latest

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=raw,value=latest

    - name: Extract metadata for backend-report
      id: meta-backend-report
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_BACKEND_REPORT }}
        tags: |
          type=raw,value=latest

    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        build-args: |
          VERSION=${{ github.sha }}

    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}

    - name: Build and push backend-report image
      uses: docker/build-push-action@v4
      with:
        context: ./backend-report
        push: true
        tags: ${{ steps.meta-backend-report.outputs.tags }}
        labels: ${{ steps.meta-backend-report.outputs.labels }}

  # deploy:
  #   needs: build-and-push
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3

  #   - name: Set up kubectl
  #     uses: azure/setup-kubectl@v3
  #     with:
  #       version: 'latest'

  #   - name: Configure kubectl
  #     run: |
  #       mkdir -p ~/.kube
  #       echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
  #       chmod 600 ~/.kube/config

  #   - name: Deploy to Kubernetes
  #     run: |
  #       # Обновляем образы в Helm values
  #       sed -i "s|repository: .*|repository: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_BACKEND }}|g" sausage-store-chart/values.yaml
  #       sed -i "s|tag: .*|tag: ${{ github.sha }}|g" sausage-store-chart/values.yaml
  #       
  #       # Выполняем миграции базы данных
  #       echo "Выполнение миграций базы данных..."
  #       # Здесь можно добавить выполнение миграций через kubectl или отдельный job
  #       
  #       # Деплой через Helm
  #       helm upgrade --install sausage-store ./sausage-store-chart \
  #         --set backend.image.repository=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_BACKEND }} \
  #         --set backend.image.tag=${{ github.sha }} \
  #         --set frontend.image.repository=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_FRONTEND }} \
  #         --set frontend.image.tag=${{ github.sha }} \
  #         --set backend-report.image.repository=${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME_BACKEND_REPORT }} \
  #         --set backend-report.image.tag=${{ github.sha }}

  #   - name: Run database migrations
  #     run: |
  #       # Создаем временный pod для выполнения миграций
  #       kubectl run migration-pod --image=postgres:13 --rm -i --restart=Never -- \
  #         psql -h postgres-service -U postgres -d sausage_store -f /migrations/V001__create_tables.sql
  #       # Добавить остальные миграции по аналогии

  add_helm_chart_to_nexus:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Update Helm dependencies
      run: |
        cd sausage-store-chart
        echo "Обновление зависимостей Helm..."
        helm dependency update
        helm dependency build
        echo "Зависимости обновлены"
        echo "Список зависимостей:"
        helm dependency list

    - name: Package Helm chart
      run: |
        echo "Упаковка Helm чарта..."
        helm package sausage-store-chart/
        echo "Список созданных файлов:"
        ls -la *.tgz
        echo "Содержимое рабочей директории:"
        ls -la

    - name: Upload chart to Nexus
      run: |
        echo "Загрузка чарта в Nexus..."
        CHART_FILE=$(ls sausage-store-*.tgz | head -n1)
        if [ -z "$CHART_FILE" ]; then
          echo "Ошибка: Файл чарта не найден!"
          echo "Доступные файлы:"
          ls -la *.tgz || echo "Нет .tgz файлов"
          exit 1
        fi
        echo "Найден файл чарта: $CHART_FILE"
        curl -u ${{ secrets.NEXUS_HELM_REPO_USER }}:${{ secrets.NEXUS_HELM_REPO_PASSWORD }} \
          --upload-file "$CHART_FILE" \
          ${{ secrets.NEXUS_HELM_REPO }}/sausage-store-chart-$(date +%Y%m%d%H%M%S).tgz

  deploy_helm_chart_to_kubernetes:
    needs: add_helm_chart_to_nexus
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Add Nexus Helm repository
      run: |
        helm repo add nexus ${{ secrets.NEXUS_HELM_REPO }} --username ${{ secrets.NEXUS_HELM_REPO_USER }} --password ${{ secrets.NEXUS_HELM_REPO_PASSWORD }}
        helm repo update

    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > ~/.kube/config
        chmod 600 ~/.kube/config
        
        # Проверяем подключение к кластеру (только в нашем namespace)
        kubectl get pods -n r-devops-magistracy-project-2sem-907324971 || echo "Namespace пуст или недоступен"

    - name: Clean up existing resources
      run: |
        echo "Очистка существующих ресурсов в Kubernetes..."
        
        # Используем namespace из конфигурации
        NAMESPACE="r-devops-magistracy-project-2sem-907324971"
        echo "Используем namespace: $NAMESPACE"
        
        # Удаляем существующий релиз Helm, если он есть
        helm uninstall sausage-store -n $NAMESPACE || echo "Релиз sausage-store не найден"
        
        # Удаляем все ресурсы с нашими лейблами в текущем namespace
        kubectl delete deployment,service,ingress,configmap,secret,pvc,hpa,vpa,job --selector=app.kubernetes.io/part-of=sausage-store -n $NAMESPACE --ignore-not-found=true || true
        kubectl delete deployment,service,ingress,configmap,secret,pvc,hpa,vpa,job --selector=app=sausage-store -n $NAMESPACE --ignore-not-found=true || true
        
        # Удаляем ресурсы по именам в текущем namespace
        kubectl delete deployment postgresql mongodb -n $NAMESPACE --ignore-not-found=true || true
        kubectl delete service postgresql-service mongodb-service -n $NAMESPACE --ignore-not-found=true || true
        kubectl delete job mongodb-init-job -n $NAMESPACE --ignore-not-found=true || true
        
        # Ждем завершения удаления
        echo "Ожидание завершения удаления ресурсов..."
        sleep 30
        
        echo "Очистка завершена"

    - name: Deploy to Kubernetes
      run: |
        # Используем namespace из конфигурации
        NAMESPACE="r-devops-magistracy-project-2sem-907324971"
        echo "Деплой в namespace: $NAMESPACE"
        
        # Обновляем репозиторий перед деплоем
        echo "Обновление Helm репозитория..."
        helm repo update
        
        # Проверяем доступные чарты в репозитории
        echo "Доступные чарты в репозитории:"
        helm search repo nexus/ --versions
        
        # Деплоим с указанием версии чарта
        helm upgrade --install sausage-store nexus/sausage-store \
          --namespace $NAMESPACE \
          --create-namespace \
          --set backend.image.repository=${{ secrets.DOCKER_USERNAME }}/sausage-store-backend \
          --set backend.image.tag=${{ github.sha }} \
          --set frontend.image.repository=${{ secrets.DOCKER_USERNAME }}/sausage-store-frontend \
          --set frontend.image.tag=${{ github.sha }} \
          --set backend-report.image.repository=${{ secrets.DOCKER_USERNAME }}/sausage-store-backend-report \
          --set backend-report.image.tag=${{ github.sha }} \
          --wait --timeout=300s

    - name: Verify deployment
      run: |
        echo "Проверка статуса деплоя..."
        
        # Используем namespace из конфигурации
        NAMESPACE="r-devops-magistracy-project-2sem-907324971"
        echo "Проверка в namespace: $NAMESPACE"
        
        # Проверяем статус подов
        kubectl get pods -l app.kubernetes.io/part-of=sausage-store -n $NAMESPACE
        kubectl get pods -l app=sausage-store -n $NAMESPACE
        
        # Проверяем сервисы
        kubectl get services -l app.kubernetes.io/part-of=sausage-store -n $NAMESPACE
        kubectl get services -l app=sausage-store -n $NAMESPACE
        
        # Проверяем Ingress
        kubectl get ingress -n $NAMESPACE
        
        # Проверяем статус Helm релиза
        helm status sausage-store -n $NAMESPACE
        
        echo "Деплой завершен успешно!"